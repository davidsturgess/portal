import DatasetsFilter, { Facet } from "@components/_shared/DatasetsFilter";
import { Button } from "@components/ui/button";
import QuickFilterDropdown from "@components/ui/quick-filter-dropdown";
import { MagnifyingGlassIcon, XMarkIcon } from "@heroicons/react/20/solid";
import { PackageSearchOptions } from "@portaljs/ckan";
import type { InferGetServerSidePropsType } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { unstable_serialize } from "swr";
import Layout from "../components/_shared/Layout";

import DatasetSearchItem from "@components/search/DatasetSearchItem";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@components/ui/pagination";
import datasets from "@data/datasets.json";
import example from "@data/example.json";
import sectors from "@data/sectors.json";
import CkanRequest from "@datopian/ckan-api-client-js";

type Option = {
  label: string;
  value: string;
};

export async function getServerSideProps() {
  let modes: Option[] = [];
  let services: Option[] = [];

  const schemingFields = (
    await CkanRequest.get<any>("scheming_dataset_schema_show?type=dataset")
  ).result;

  schemingFields.dataset_fields.forEach((x: any) => {
    if (x.field_name === "modes") {
      modes = x.choices;
    } else if (x.field_name === "services") {
      services = x.choices;
    }
  });

  let tags: Facet[] = [];
  let orgs: Facet[] = [];
  let resourcesFormats: Facet[] = [];
  let topics: Facet[] = [];
  let groups: Facet[] = [];
  let regions: Facet[] = [];
  let metadataCreatedYear: Facet[] = [];
  let yearsCoverage: Facet[] = [];

  const datasetSearchResult = (
    await CkanRequest.get<any>(
      `package_search?rows=9&start=0&facet.field=
      ["tags", "groups", "regions", "topics", "organization", "res_format", "temporal_coverage_start", "temporal_coverage_end", "metadata_created_year"]`
    )
  ).result;

  const facets = datasetSearchResult.search_facets;

  for (const key in facets) {
    switch (key) {
      case "organization": {
        orgs = facets[key].items;
        break;
      }
      case "tags": {
        tags = facets[key].items;
        break;
      }
      case "groups": {
        groups = facets[key].items;
        break;
      }
      case "regions": {
        regions = facets[key].items;
        break;
      }
      case "topics": {
        topics = facets[key].items;
        break;
      }
      case "res_format": {
        resourcesFormats = facets[key].items;
        break;
      }
      case "metadata_created_year": {
        metadataCreatedYear = facets[key].items;
        break;
      }
      case "temporal_coverage_end":
      case "temporal_coverage_start": {
        yearsCoverage.push(...facets[key].items);
        break;
      }
      default: {
        break;
      }
    }
  }

  const search_result = datasetSearchResult.results;

  return {
    props: {
      ...facets,
      fallback: {
        [unstable_serialize([
          "package_search",
          { offset: 0, limit: 5, tags: [], groups: [], orgs: [] },
        ])]: search_result,
      },
      tags,
      orgs,
      resourcesFormats,
      topics,
      groups,
      regions,
      metadataCreated: metadataCreatedYear,
      yearsCoverage,
      modes,
      services,
    },
  };
}

export default function DatasetSearch({
  fallback,
  groups,
  tags,
  orgs,
  resourcesFormats,
  topics,
  regions,
  metadataCreated,
  yearsCoverage,
  modes,
  services,
}: InferGetServerSidePropsType<typeof getServerSideProps>): JSX.Element {
  const router = useRouter();
  const { q, sector, mode, service, region } = router.query;
  const [options, setOptions] = useState<PackageSearchOptions>({
    offset: 0,
    limit: 5,
    tags: [],
    groups: [],
    orgs: [],
    query: q as string,
  });

  const [searchFilter, setSearchFilter] = useState({
    tags: [],
    startYear: undefined,
    endYear: undefined,
    orgs: [],
    publicationDate: [],
    showArchived: false,
    locations: [],
  });

  return (
    <>
      <Head>
        <title>Datasets</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout backgroundEffect effectSize="100px">
        <div className="container">
          <div className="pt-5">
            <div className="relative flex w-full items-center rounded-[12px] border border-[#D1D5DB] ">
              <input
                className="w-full grow rounded-[12px] border-0 py-[18px] pl-4 pr-[150px] focus:ring-1 focus:ring-[#006064] "
                placeholder="Find statistics, forecasts & studies"
              />
              <span
                className="absolute right-[125px] z-[10] cursor-pointer p-2 text-gray-500"
                role="button"
              >
                <XMarkIcon width={20} />
              </span>

              <Button
                type="submit"
                className="absolute right-[10px] top-[10px] flex gap-[8px]"
              >
                <MagnifyingGlassIcon width={20} />
                Search
              </Button>
            </div>
          </div>
          <div className="mt-8">
            <div className="flex flex-col gap-4 lg:flex-row lg:gap-[64px]">
              <div className="w-full">
                <div className="flex flex-col items-center gap-4 md:flex-row">
                  <span className="text-base font-medium text-gray-900">
                    Quick filters:
                  </span>
                  <div className="flex flex-wrap items-center gap-2 sm:flex-row sm:flex-nowrap">
                    <QuickFilterDropdown text="Sector" items={sectors} />
                    <QuickFilterDropdown text="Mode" items={modes} />
                    <QuickFilterDropdown text="Service" items={services} />
                    <QuickFilterDropdown
                      text="Region"
                      defaultValue={region as string}
                      items={example}
                    />
                  </div>
                </div>
                <section className="mt-8 ">
                  <div className="flex flex-col gap-8">
                    {datasets.map((item, i) => (
                      <DatasetSearchItem
                        key={`dataset-result-${i}`}
                        {...item}
                      />
                    ))}
                  </div>
                  <Pagination className="mx-0 mt-8 justify-start">
                    <PaginationContent>
                      <PaginationItem>
                        <PaginationPrevious href="#" />
                      </PaginationItem>
                      <PaginationItem>
                        <PaginationLink href="#">1</PaginationLink>
                      </PaginationItem>
                      <PaginationItem>
                        <PaginationLink href="#">2</PaginationLink>
                      </PaginationItem>
                      <PaginationItem>
                        <PaginationNext href="#" />
                      </PaginationItem>
                    </PaginationContent>
                  </Pagination>
                </section>
              </div>

              <div className="order-first w-full border-l pl-5 pt-[12px] lg:order-last lg:max-w-[340px]">
                <DatasetsFilter
                  {...{
                    tags,
                    orgs,
                    resourcesFormats,
                    groups,
                    regions,
                    metadataCreated,
                    yearsCoverage,
                    modes,
                    services,
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
}
